//go:build !correct

package mtls

import (
	"testing"
)

func TestGenerateTlsConfigForMTLS(t *testing.T) {
	caCert := []byte("-----BEGIN CERTIFICATE-----\nMIIDBzCCAe+gAwIBAgIUAlwKmqoztQKhikreuIkAA3RlImIwDQYJKoZIhvcNAQEL\nBQAwEzERMA8GA1UEAwwITXlUZXN0Q0EwHhcNMjUwMTIyMTQ0MDU2WhcNMzUwMTIw\nMTQ0MDU2WjATMREwDwYDVQQDDAhNeVRlc3RDQTCCASIwDQYJKoZIhvcNAQEBBQAD\nggEPADCCAQoCggEBANlJuklJRqHcb4hwv3wvgETfCvl/URLpQh015LW5r+EjDFmB\nZfFsIlYXWCFs1bOxrt4w+W7IMgqPdUiZN9kPIxCsUu08diW5UYIhuGwZ30iXvaLe\nvCUcwpJeRyAyp33oiQtJ9kmDLqwDUQvBV7r0TUHaMpfiygq7X8CIo4CT6NfsylEN\nmFIjZ41Lhe73LpacoipNlquVDinqA1J0WSYdivebAMud1c3Q+mInYNw3g2+kfpbX\nMN3Q8UhEhuLDErlPMnV5iuX+28UG59FDOI2mv9YQWMzmqtS0o/07400wjJB+q2A1\nxDXdQ8TQ0S7E+OaP1RzlNzmTi4DxwUaQaqAkPukCAwEAAaNTMFEwHQYDVR0OBBYE\nFOLUYt3XmEGWY0OytERihCvYAfiDMB8GA1UdIwQYMBaAFOLUYt3XmEGWY0OytERi\nhCvYAfiDMA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBACkYRjIK\n/kkCQtLV93RZIfLoVt+eQRG4I1AZivbxTbtJG9SXb129Cgl5cLqwB8m1h2+XdfHb\ndB3sRNYKqBYbEuFpkhtJmHthhjAL/zFcpKYvohbTC4IUZ9q29Ruhg6Jmt5z8ydSO\nBfac4j08FIYqlNPWoGoFRcCq5tZdRuX+XXgaK24BV8zHHQZRvtaVm39n7kDuF1Oq\nEaCd7vYRXNWA8E1hDo3D6WHpIzA8aXr7fdrZ9GAwEf/94ETGSdYjpmQLmVkBxsGa\nlpu8lOk0VgKWinpBUFXH14lcjmtUvzPtV2XtXMfcKztaYSip+QbjkD96cydHQk20\nDF2u+tu1w9pKd78=\n-----END CERTIFICATE-----\n")
	clientCert := []byte("-----BEGIN CERTIFICATE-----\nMIIC9DCCAdygAwIBAgIUZ1hruSo8l0oew5srt2bjCxYSEdAwDQYJKoZIhvcNAQEL\nBQAwEzERMA8GA1UEAwwITXlUZXN0Q0EwHhcNMjUwMTIyMTQ0MjQxWhcNMjYwMTIy\nMTQ0MjQxWjARMQ8wDQYDVQQDDAZjbGllbnQwggEiMA0GCSqGSIb3DQEBAQUAA4IB\nDwAwggEKAoIBAQDJi9BfKD+JPZjRTcbNNS0CFL+6W+9AG/ezNXey0npGWYajY6Ih\n+w12hdoq3C2A9bw3DG+qE0cP9UYwSTklEmJ36dzCBBdgZunS4qNzxScRltnAmB3X\nMTIqg6o+XYGb0LVLRz//8gcInrW28pVxbqLtcLbyx6xwKrDT7nadNLKd5gYM6+Uo\nOluOdNCcyznKxZYKnVGp6FgKVB+GZ6hleus7inFqHbZQWUJiaH4XVFnvVEDJfyaf\ns80F52r4GqibqNYu5LNn1xqLL26aUO3Kqblo9aGJ5XmEDO0ygBUi/vx1pPiTDwh8\nbWdo5bc7wdPo7LBx6+2kAifxB+ftpV4fRWl5AgMBAAGjQjBAMB0GA1UdDgQWBBSe\ntUPjBY3dVZJ3qVNNGLjQ6ER4njAfBgNVHSMEGDAWgBTi1GLd15hBlmNDsrREYoQr\n2AH4gzANBgkqhkiG9w0BAQsFAAOCAQEApslyfKWIulFbWv6f5RHnPtQR50iuDrhx\nr7Q5n7l9/3AZZLGK8XuR+RgWIii1xSes3gbIbue+viQqkw+seOVib6TKjH8kgMp0\nLVHuPfNqs15Ovlw8F5KdRQnTmHlHjB9PAW1OiMNBt8w7LV4uw0LpqsvbHUeQxhPM\nxAI9HUbY/mGJo4lq1eLERwXBpjJTvlHyIcOJUOiDjJdY9QZepclFHdaLgATxasR9\nMSog0QS2y8WHirQn6dbJiX6+2GoMWQxFtYzWFEih/A6FsMEd/pyw9GpWlEKrH704\nm8Y0xcILPv8XqSrTGBARnod5oXf2bp5ONRdR5rPStFkgX99TzaAAcg==\n-----END CERTIFICATE-----\n")
	clientKey := []byte("-----BEGIN PRIVATE KEY-----\nMIIEugIBADANBgkqhkiG9w0BAQEFAASCBKQwggSgAgEAAoIBAQDJi9BfKD+JPZjR\nTcbNNS0CFL+6W+9AG/ezNXey0npGWYajY6Ih+w12hdoq3C2A9bw3DG+qE0cP9UYw\nSTklEmJ36dzCBBdgZunS4qNzxScRltnAmB3XMTIqg6o+XYGb0LVLRz//8gcInrW2\n8pVxbqLtcLbyx6xwKrDT7nadNLKd5gYM6+UoOluOdNCcyznKxZYKnVGp6FgKVB+G\nZ6hleus7inFqHbZQWUJiaH4XVFnvVEDJfyafs80F52r4GqibqNYu5LNn1xqLL26a\nUO3Kqblo9aGJ5XmEDO0ygBUi/vx1pPiTDwh8bWdo5bc7wdPo7LBx6+2kAifxB+ft\npV4fRWl5AgMBAAECggEAKm2tAYNDENyvQYyqh8OkhHYiwJQfAzOACzF7z+DgTdQF\n9HqChL3JoURfX7t3NtlEdKBBF6A0Swc67epURdofcZgBWbSryScRHUyJ1VLRPTIx\nCArd6VHZejq6iaN8p/UhXUYUEoj8cxOaNHfP/w+n6+1ZDjX7tqc+D3d5b/HKklOd\nGBF4AqCP6M8peG3Wi+RnN9I8T4TtDzOXuXbMoZAh7KOlWHVJdReusnrs16iyGAeC\niF3LIfNBjPcBOdk6CSp4B36uHZkOX/kX1aiVZQTvrZ2ZDK0Mlt/Lr+U5RvdITT5I\na43LQQSdj4Uamv+vuUi8hoVCxQomMm9mEkr7Vwf0CQKBgQDmSULtf5g7KZMklvkv\n4sIRV9Opt3Xn0dxQsvhRF9CNzKGfyWPH6iNQhz5BvRv5KYofzbJFNgDiaDRyQZhn\naAWA0YAtCkbYPGEWB+H/y5Wt0jS0K+p9CwTePD0bCau182ZHV6+Ln7GTHw7NZhmB\nIoNrWgaCq7gUeqQGWZPgrr2XpQKBgQDgDQSL2ZJozxwsC1NhOVC3V12wVrKXoUQp\nBdceql0QM1Ofy5id1XUL4IjVqkSEkjZ7bNC9dQwvxvvhrdgkAblMqbnQFx+4iIE2\n8eSsE4nu/BbHtoss8OR1bkehk6Q/EUvh10WRwldNwlEd/fRZn18PBJ78PnoOVI/U\nX2XSbFdCRQJ/CstkV72jZSKNwylQhO4cKrPzOAFhhXxQ13eMLEDxhbQR32uRQc23\n2g583JgAt606zELYGGZvpC0+SBzLCA3YNDGd0H6q03gBFQdJkLP6UCuKTOfCFhpu\nH/yy4JGTevPt12pE0EasDDloeDhQ+bykbGPL6lQiTNNy3NlWFTIbsQKBgAVnqv1o\nsUSAApD5cPh+dnkFzYfMf6Byzn8i2e6uc3JJmrHXKoZcOOehcgudgOulz1So6lw3\nr6STa04lcHpl5D96NLZVaHl+KYfWzApuqjwurqoAuFjMMua2U1oNgr/Wvfrjw5Th\nmFOS5XwQvU1QL+3f0aoKI82mspWP+5fY7z31AoGAd7SXeZtDHVU1hx4knbobm7n2\nXNDGWxE3h3E2IlC1rkwAAcOjzhwc7ZES0PbBfeBII9S6DwOFY+PsfGn9iGt+7fGh\nTixJX6oTQ759PAEf3WegjyR9vgpySLrYyf8clGmbeJU17gc4lImewOHy+oM5EoTZ\ntsLg8syVr7vKixYxSEA=\n-----END PRIVATE KEY-----\n")

	tlsConfig := GenerateTlsConfigForMTLS("test", caCert, clientCert, clientKey)
	if tlsConfig == nil {
		t.Error("generateTLSConfigForMTLS returned nil")
	}
	if len(tlsConfig.Certificates) == 0 {
		t.Error("generateTLSConfigForMTLS returned empty certificates")
	}
}
