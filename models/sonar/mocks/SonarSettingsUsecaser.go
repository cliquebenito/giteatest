// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	domain "code.gitea.io/gitea/models/sonar/domain"

	repo "code.gitea.io/gitea/models/repo"
)

// SonarSettingsUsecaser is an autogenerated mock type for the SonarSettingsUsecaser type
type SonarSettingsUsecaser struct {
	mock.Mock
}

// CreateSonarSettings provides a mock function with given fields: ctx, settings
func (_m *SonarSettingsUsecaser) CreateSonarSettings(ctx context.Context, settings domain.CreateOrUpdateSonarProjectRequest) error {
	ret := _m.Called(ctx, settings)

	if len(ret) == 0 {
		panic("no return value specified for CreateSonarSettings")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.CreateOrUpdateSonarProjectRequest) error); ok {
		r0 = rf(ctx, settings)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSonarSettings provides a mock function with given fields: ctx, repoID
func (_m *SonarSettingsUsecaser) DeleteSonarSettings(ctx context.Context, repoID int64) error {
	ret := _m.Called(ctx, repoID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSonarSettings")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, repoID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SonarSettings provides a mock function with given fields: ctx, repoID
func (_m *SonarSettingsUsecaser) SonarSettings(ctx context.Context, repoID int64) (*repo.ScSonarSettings, error) {
	ret := _m.Called(ctx, repoID)

	if len(ret) == 0 {
		panic("no return value specified for SonarSettings")
	}

	var r0 *repo.ScSonarSettings
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*repo.ScSonarSettings, error)); ok {
		return rf(ctx, repoID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *repo.ScSonarSettings); ok {
		r0 = rf(ctx, repoID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repo.ScSonarSettings)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, repoID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSonarSettings provides a mock function with given fields: ctx, settings
func (_m *SonarSettingsUsecaser) UpdateSonarSettings(ctx context.Context, settings domain.CreateOrUpdateSonarProjectRequest) error {
	ret := _m.Called(ctx, settings)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSonarSettings")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.CreateOrUpdateSonarProjectRequest) error); ok {
		r0 = rf(ctx, settings)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSonarSettingsUsecaser creates a new instance of SonarSettingsUsecaser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSonarSettingsUsecaser(t interface {
	mock.TestingT
	Cleanup(func())
}) *SonarSettingsUsecaser {
	mock := &SonarSettingsUsecaser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
