// Code generated by mockery v2.49.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	xorm "xorm.io/xorm"
)

// DbEngine is an autogenerated mock type for the dbEngine type
type DbEngine struct {
	mock.Mock
}

// Context provides a mock function with given fields: ctx
func (_m *DbEngine) Context(ctx context.Context) *xorm.Session {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Context")
	}

	var r0 *xorm.Session
	if rf, ok := ret.Get(0).(func(context.Context) *xorm.Session); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*xorm.Session)
		}
	}

	return r0
}

// Delete provides a mock function with given fields: _a0
func (_m *DbEngine) Delete(_a0 ...interface{}) (int64, error) {
	var _ca []interface{}
	_ca = append(_ca, _a0...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(...interface{}) (int64, error)); ok {
		return rf(_a0...)
	}
	if rf, ok := ret.Get(0).(func(...interface{}) int64); ok {
		r0 = rf(_a0...)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(...interface{}) error); ok {
		r1 = rf(_a0...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Find provides a mock function with given fields: _a0, _a1
func (_m *DbEngine) Find(_a0 interface{}, _a1 ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _a1...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, ...interface{}) error); ok {
		r0 = rf(_a0, _a1...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: beans
func (_m *DbEngine) Get(beans ...interface{}) (bool, error) {
	var _ca []interface{}
	_ca = append(_ca, beans...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(...interface{}) (bool, error)); ok {
		return rf(beans...)
	}
	if rf, ok := ret.Get(0).(func(...interface{}) bool); ok {
		r0 = rf(beans...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(...interface{}) error); ok {
		r1 = rf(beans...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: beans
func (_m *DbEngine) Insert(beans ...interface{}) (int64, error) {
	var _ca []interface{}
	_ca = append(_ca, beans...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(...interface{}) (int64, error)); ok {
		return rf(beans...)
	}
	if rf, ok := ret.Get(0).(func(...interface{}) int64); ok {
		r0 = rf(beans...)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(...interface{}) error); ok {
		r1 = rf(beans...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Where provides a mock function with given fields: _a0, _a1
func (_m *DbEngine) Where(_a0 interface{}, _a1 ...interface{}) *xorm.Session {
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _a1...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Where")
	}

	var r0 *xorm.Session
	if rf, ok := ret.Get(0).(func(interface{}, ...interface{}) *xorm.Session); ok {
		r0 = rf(_a0, _a1...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*xorm.Session)
		}
	}

	return r0
}

// NewDbEngine creates a new instance of DbEngine. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDbEngine(t interface {
	mock.TestingT
	Cleanup(func())
}) *DbEngine {
	mock := &DbEngine{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
