// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	review_settings "code.gitea.io/gitea/models/review_settings"
)

// ReviewSettingsDB is an autogenerated mock type for the reviewSettingsDB type
type ReviewSettingsDB struct {
	mock.Mock
}

// GetReviewSettings provides a mock function with given fields: _a0, repoID
func (_m *ReviewSettingsDB) GetReviewSettings(_a0 context.Context, repoID int64) ([]*review_settings.ReviewSettings, error) {
	ret := _m.Called(_a0, repoID)

	if len(ret) == 0 {
		panic("no return value specified for GetReviewSettings")
	}

	var r0 []*review_settings.ReviewSettings
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*review_settings.ReviewSettings, error)); ok {
		return rf(_a0, repoID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*review_settings.ReviewSettings); ok {
		r0 = rf(_a0, repoID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*review_settings.ReviewSettings)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(_a0, repoID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewReviewSettingsDB creates a new instance of ReviewSettingsDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReviewSettingsDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReviewSettingsDB {
	mock := &ReviewSettingsDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
