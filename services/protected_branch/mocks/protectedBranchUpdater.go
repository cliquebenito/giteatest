// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	protected_branch "code.gitea.io/gitea/models/git/protected_branch"
	mock "github.com/stretchr/testify/mock"

	repo "code.gitea.io/gitea/models/repo"
)

// ProtectedBranchUpdater is an autogenerated mock type for the protectedBranchUpdater type
type ProtectedBranchUpdater struct {
	mock.Mock
}

// UpdateModelProtectedBranch provides a mock function with given fields: _a0, _a1
func (_m *ProtectedBranchUpdater) UpdateModelProtectedBranch(_a0 *protected_branch.ProtectedBranch, _a1 *protected_branch.ProtectedBranch) *protected_branch.ProtectedBranch {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateModelProtectedBranch")
	}

	var r0 *protected_branch.ProtectedBranch
	if rf, ok := ret.Get(0).(func(*protected_branch.ProtectedBranch, *protected_branch.ProtectedBranch) *protected_branch.ProtectedBranch); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protected_branch.ProtectedBranch)
		}
	}

	return r0
}

// UpdateWhitelistOptions provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *ProtectedBranchUpdater) UpdateWhitelistOptions(_a0 context.Context, _a1 *repo.Repository, _a2 *protected_branch.ProtectedBranch, _a3 protected_branch.WhitelistOptions) error {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWhitelistOptions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *repo.Repository, *protected_branch.ProtectedBranch, protected_branch.WhitelistOptions) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewProtectedBranchUpdater creates a new instance of ProtectedBranchUpdater. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProtectedBranchUpdater(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProtectedBranchUpdater {
	mock := &ProtectedBranchUpdater{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
