// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	protected_branch "code.gitea.io/gitea/models/git/protected_branch"
	mock "github.com/stretchr/testify/mock"
)

// AuditConverter is an autogenerated mock type for the auditConverter type
type AuditConverter struct {
	mock.Mock
}

// Convert provides a mock function with given fields: protectBranch
func (_m *AuditConverter) Convert(protectBranch protected_branch.ProtectedBranch) protected_branch.AuditProtectedBranch {
	ret := _m.Called(protectBranch)

	if len(ret) == 0 {
		panic("no return value specified for Convert")
	}

	var r0 protected_branch.AuditProtectedBranch
	if rf, ok := ret.Get(0).(func(protected_branch.ProtectedBranch) protected_branch.AuditProtectedBranch); ok {
		r0 = rf(protectBranch)
	} else {
		r0 = ret.Get(0).(protected_branch.AuditProtectedBranch)
	}

	return r0
}

// NewAuditConverter creates a new instance of AuditConverter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuditConverter(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuditConverter {
	mock := &AuditConverter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
