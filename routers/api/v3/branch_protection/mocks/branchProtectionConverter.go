// Code generated by mockery v2.52.4. DO NOT EDIT.

package mocks

import (
	context "context"

	models "code.gitea.io/gitea/routers/api/v3/models"
	mock "github.com/stretchr/testify/mock"

	protected_branch "code.gitea.io/gitea/models/git/protected_branch"
)

// BranchProtectionConverter is an autogenerated mock type for the branchProtectionConverter type
type BranchProtectionConverter struct {
	mock.Mock
}

// ToBranchProtectionBody provides a mock function with given fields: rule
func (_m *BranchProtectionConverter) ToBranchProtectionBody(rule protected_branch.ProtectedBranch) models.BranchProtectionBody {
	ret := _m.Called(rule)

	if len(ret) == 0 {
		panic("no return value specified for ToBranchProtectionBody")
	}

	var r0 models.BranchProtectionBody
	if rf, ok := ret.Get(0).(func(protected_branch.ProtectedBranch) models.BranchProtectionBody); ok {
		r0 = rf(rule)
	} else {
		r0 = ret.Get(0).(models.BranchProtectionBody)
	}

	return r0
}

// ToBranchProtectionRulesBody provides a mock function with given fields: rules
func (_m *BranchProtectionConverter) ToBranchProtectionRulesBody(rules protected_branch.ProtectedBranchRules) []models.BranchProtectionBody {
	ret := _m.Called(rules)

	if len(ret) == 0 {
		panic("no return value specified for ToBranchProtectionRulesBody")
	}

	var r0 []models.BranchProtectionBody
	if rf, ok := ret.Get(0).(func(protected_branch.ProtectedBranchRules) []models.BranchProtectionBody); ok {
		r0 = rf(rules)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.BranchProtectionBody)
		}
	}

	return r0
}

// ToProtectedBranch provides a mock function with given fields: ctx, protectedBranchRequest
func (_m *BranchProtectionConverter) ToProtectedBranch(ctx context.Context, protectedBranchRequest models.BranchProtectionBody) *protected_branch.ProtectedBranch {
	ret := _m.Called(ctx, protectedBranchRequest)

	if len(ret) == 0 {
		panic("no return value specified for ToProtectedBranch")
	}

	var r0 *protected_branch.ProtectedBranch
	if rf, ok := ret.Get(0).(func(context.Context, models.BranchProtectionBody) *protected_branch.ProtectedBranch); ok {
		r0 = rf(ctx, protectedBranchRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protected_branch.ProtectedBranch)
		}
	}

	return r0
}

// NewBranchProtectionConverter creates a new instance of BranchProtectionConverter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBranchProtectionConverter(t interface {
	mock.TestingT
	Cleanup(func())
}) *BranchProtectionConverter {
	mock := &BranchProtectionConverter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
