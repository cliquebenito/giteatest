// Code generated by mockery v2.52.4. DO NOT EDIT.

package mocks

import (
	context "context"

	protected_branch "code.gitea.io/gitea/models/git/protected_branch"
	mock "github.com/stretchr/testify/mock"

	repo "code.gitea.io/gitea/models/repo"
)

// ProtectedBranchManager is an autogenerated mock type for the protectedBranchManager type
type ProtectedBranchManager struct {
	mock.Mock
}

// CreateProtectedBranch provides a mock function with given fields: ctx, _a1, protectedBranch
func (_m *ProtectedBranchManager) CreateProtectedBranch(ctx context.Context, _a1 *repo.Repository, protectedBranch *protected_branch.ProtectedBranch) (*protected_branch.ProtectedBranch, error) {
	ret := _m.Called(ctx, _a1, protectedBranch)

	if len(ret) == 0 {
		panic("no return value specified for CreateProtectedBranch")
	}

	var r0 *protected_branch.ProtectedBranch
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *repo.Repository, *protected_branch.ProtectedBranch) (*protected_branch.ProtectedBranch, error)); ok {
		return rf(ctx, _a1, protectedBranch)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *repo.Repository, *protected_branch.ProtectedBranch) *protected_branch.ProtectedBranch); ok {
		r0 = rf(ctx, _a1, protectedBranch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protected_branch.ProtectedBranch)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *repo.Repository, *protected_branch.ProtectedBranch) error); ok {
		r1 = rf(ctx, _a1, protectedBranch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProtectedBranchByRuleName provides a mock function with given fields: ctx, _a1, ruleName
func (_m *ProtectedBranchManager) DeleteProtectedBranchByRuleName(ctx context.Context, _a1 *repo.Repository, ruleName string) error {
	ret := _m.Called(ctx, _a1, ruleName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProtectedBranchByRuleName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *repo.Repository, string) error); ok {
		r0 = rf(ctx, _a1, ruleName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindRepoProtectedBranchRules provides a mock function with given fields: ctx, repoID
func (_m *ProtectedBranchManager) FindRepoProtectedBranchRules(ctx context.Context, repoID int64) (protected_branch.ProtectedBranchRules, error) {
	ret := _m.Called(ctx, repoID)

	if len(ret) == 0 {
		panic("no return value specified for FindRepoProtectedBranchRules")
	}

	var r0 protected_branch.ProtectedBranchRules
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (protected_branch.ProtectedBranchRules, error)); ok {
		return rf(ctx, repoID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) protected_branch.ProtectedBranchRules); ok {
		r0 = rf(ctx, repoID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protected_branch.ProtectedBranchRules)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, repoID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProtectedBranchRuleByName provides a mock function with given fields: ctx, repoID, ruleName
func (_m *ProtectedBranchManager) GetProtectedBranchRuleByName(ctx context.Context, repoID int64, ruleName string) (*protected_branch.ProtectedBranch, error) {
	ret := _m.Called(ctx, repoID, ruleName)

	if len(ret) == 0 {
		panic("no return value specified for GetProtectedBranchRuleByName")
	}

	var r0 *protected_branch.ProtectedBranch
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) (*protected_branch.ProtectedBranch, error)); ok {
		return rf(ctx, repoID, ruleName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) *protected_branch.ProtectedBranch); ok {
		r0 = rf(ctx, repoID, ruleName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protected_branch.ProtectedBranch)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string) error); ok {
		r1 = rf(ctx, repoID, ruleName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProtectedBranch provides a mock function with given fields: ctx, _a1, protectedBranch, ruleName
func (_m *ProtectedBranchManager) UpdateProtectedBranch(ctx context.Context, _a1 *repo.Repository, protectedBranch *protected_branch.ProtectedBranch, ruleName string) (*protected_branch.ProtectedBranch, error) {
	ret := _m.Called(ctx, _a1, protectedBranch, ruleName)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProtectedBranch")
	}

	var r0 *protected_branch.ProtectedBranch
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *repo.Repository, *protected_branch.ProtectedBranch, string) (*protected_branch.ProtectedBranch, error)); ok {
		return rf(ctx, _a1, protectedBranch, ruleName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *repo.Repository, *protected_branch.ProtectedBranch, string) *protected_branch.ProtectedBranch); ok {
		r0 = rf(ctx, _a1, protectedBranch, ruleName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protected_branch.ProtectedBranch)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *repo.Repository, *protected_branch.ProtectedBranch, string) error); ok {
		r1 = rf(ctx, _a1, protectedBranch, ruleName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProtectedBranchManager creates a new instance of ProtectedBranchManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProtectedBranchManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProtectedBranchManager {
	mock := &ProtectedBranchManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
