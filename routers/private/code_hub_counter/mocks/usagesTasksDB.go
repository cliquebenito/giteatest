// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	code_hub_counter_task "code.gitea.io/gitea/models/code_hub_counter_task"

	mock "github.com/stretchr/testify/mock"
)

// UsagesTasksDB is an autogenerated mock type for the usagesTasksDB type
type UsagesTasksDB struct {
	mock.Mock
}

// InsertTask provides a mock function with given fields: ctx, repoID, userID, action
func (_m *UsagesTasksDB) InsertTask(ctx context.Context, repoID int64, userID int64, action code_hub_counter_task.CodeHubAction) error {
	ret := _m.Called(ctx, repoID, userID, action)

	if len(ret) == 0 {
		panic("no return value specified for InsertTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, code_hub_counter_task.CodeHubAction) error); ok {
		r0 = rf(ctx, repoID, userID, action)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUsagesTasksDB creates a new instance of UsagesTasksDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsagesTasksDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *UsagesTasksDB {
	mock := &UsagesTasksDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
