// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// UniqueUsagesDB is an autogenerated mock type for the uniqueUsagesDB type
type UniqueUsagesDB struct {
	mock.Mock
}

// CountUniqueUsages provides a mock function with given fields: _a0, repoID, userID
func (_m *UniqueUsagesDB) CountUniqueUsages(_a0 context.Context, repoID int64, userID int64) (int, error) {
	ret := _m.Called(_a0, repoID, userID)

	if len(ret) == 0 {
		panic("no return value specified for CountUniqueUsages")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) (int, error)); ok {
		return rf(_a0, repoID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) int); ok {
		r0 = rf(_a0, repoID, userID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(_a0, repoID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountUniqueUsagesByRepoID provides a mock function with given fields: _a0, repoID
func (_m *UniqueUsagesDB) CountUniqueUsagesByRepoID(_a0 context.Context, repoID int64) (int, error) {
	ret := _m.Called(_a0, repoID)

	if len(ret) == 0 {
		panic("no return value specified for CountUniqueUsagesByRepoID")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (int, error)); ok {
		return rf(_a0, repoID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) int); ok {
		r0 = rf(_a0, repoID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(_a0, repoID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUniqueUsage provides a mock function with given fields: ctx, repoID, userID
func (_m *UniqueUsagesDB) UpdateUniqueUsage(ctx context.Context, repoID int64, userID int64) error {
	ret := _m.Called(ctx, repoID, userID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUniqueUsage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, repoID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUniqueUsagesDB creates a new instance of UniqueUsagesDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUniqueUsagesDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *UniqueUsagesDB {
	mock := &UniqueUsagesDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
