// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	context "context"

	internal_metric_counter "code.gitea.io/gitea/models/internal_metric_counter"
	mock "github.com/stretchr/testify/mock"
)

// CounterDB is an autogenerated mock type for the counterDB type
type CounterDB struct {
	mock.Mock
}

// GetInternalMetricCounters provides a mock function with given fields: _a0
func (_m *CounterDB) GetInternalMetricCounters(_a0 context.Context) ([]internal_metric_counter.InternalMetricCounter, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetInternalMetricCounters")
	}

	var r0 []internal_metric_counter.InternalMetricCounter
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]internal_metric_counter.InternalMetricCounter, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []internal_metric_counter.InternalMetricCounter); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]internal_metric_counter.InternalMetricCounter)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCounter provides a mock function with given fields: ctx, repoID, counter, metricKey
func (_m *CounterDB) UpdateCounter(ctx context.Context, repoID int64, counter int, metricKey string) error {
	ret := _m.Called(ctx, repoID, counter, metricKey)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCounter")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int, string) error); ok {
		r0 = rf(ctx, repoID, counter, metricKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCounterDB creates a new instance of CounterDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCounterDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *CounterDB {
	mock := &CounterDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
