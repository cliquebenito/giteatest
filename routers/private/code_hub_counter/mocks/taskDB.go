// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	context "context"

	code_hub_counter_task "code.gitea.io/gitea/models/code_hub_counter_task"

	mock "github.com/stretchr/testify/mock"
)

// TaskDB is an autogenerated mock type for the taskDB type
type TaskDB struct {
	mock.Mock
}

// DeleteTask provides a mock function with given fields: ctx, taskID
func (_m *TaskDB) DeleteTask(ctx context.Context, taskID int64) error {
	ret := _m.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, taskID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCodeHubCounterTasks provides a mock function with given fields: _a0
func (_m *TaskDB) GetCodeHubCounterTasks(_a0 context.Context) ([]code_hub_counter_task.CodeHubCounterTasks, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetCodeHubCounterTasks")
	}

	var r0 []code_hub_counter_task.CodeHubCounterTasks
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]code_hub_counter_task.CodeHubCounterTasks, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []code_hub_counter_task.CodeHubCounterTasks); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]code_hub_counter_task.CodeHubCounterTasks)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LockTask provides a mock function with given fields: ctx, taskID
func (_m *TaskDB) LockTask(ctx context.Context, taskID int64) error {
	ret := _m.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for LockTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, taskID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnlockTask provides a mock function with given fields: ctx, taskID
func (_m *TaskDB) UnlockTask(ctx context.Context, taskID int64) error {
	ret := _m.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for UnlockTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, taskID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnlockTaskWithSuccess provides a mock function with given fields: ctx, taskID
func (_m *TaskDB) UnlockTaskWithSuccess(ctx context.Context, taskID int64) error {
	ret := _m.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for UnlockTaskWithSuccess")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, taskID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTaskDB creates a new instance of TaskDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskDB {
	mock := &TaskDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
