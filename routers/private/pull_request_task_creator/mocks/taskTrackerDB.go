// Code generated by mockery v2.49.0. DO NOT EDIT.

package mocks

import (
	context "context"

	pull_request_sender "code.gitea.io/gitea/models/pull_request_sender"
	mock "github.com/stretchr/testify/mock"
)

// TaskTrackerDB is an autogenerated mock type for the taskTrackerDB type
type TaskTrackerDB struct {
	mock.Mock
}

// IsActiveOfPullRequestStatus provides a mock function with given fields: ctx, pullRequestID
func (_m *TaskTrackerDB) IsActiveOfPullRequestStatus(ctx context.Context, pullRequestID int64) (bool, error) {
	ret := _m.Called(ctx, pullRequestID)

	if len(ret) == 0 {
		panic("no return value specified for IsActiveOfPullRequestStatus")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (bool, error)); ok {
		return rf(ctx, pullRequestID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) bool); ok {
		r0 = rf(ctx, pullRequestID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, pullRequestID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PullRequestStatusUpdate provides a mock function with given fields: ctx, req
func (_m *TaskTrackerDB) PullRequestStatusUpdate(ctx context.Context, req pull_request_sender.UpdatePullRequestStatusOptions) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for PullRequestStatusUpdate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, pull_request_sender.UpdatePullRequestStatusOptions) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTaskTrackerDB creates a new instance of TaskTrackerDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskTrackerDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskTrackerDB {
	mock := &TaskTrackerDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
