// Code generated by mockery v2.49.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	unit_links "code.gitea.io/gitea/models/unit_links"
)

// UnitLinkDB is an autogenerated mock type for the unitLinkDB type
type UnitLinkDB struct {
	mock.Mock
}

// RemoveLinks provides a mock function with given fields: ctx, fromUnitID, links, userName, pullRequestURL
func (_m *UnitLinkDB) RemoveLinks(ctx context.Context, fromUnitID int64, links unit_links.AllUnitLinks, userName string, pullRequestURL string) error {
	ret := _m.Called(ctx, fromUnitID, links, userName, pullRequestURL)

	if len(ret) == 0 {
		panic("no return value specified for RemoveLinks")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, unit_links.AllUnitLinks, string, string) error); ok {
		r0 = rf(ctx, fromUnitID, links, userName, pullRequestURL)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateLinks provides a mock function with given fields: ctx, fromUnitID, links, userName, pullRequestURL
func (_m *UnitLinkDB) UpdateLinks(ctx context.Context, fromUnitID int64, links unit_links.AllUnitLinks, userName string, pullRequestURL string) error {
	ret := _m.Called(ctx, fromUnitID, links, userName, pullRequestURL)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLinks")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, unit_links.AllUnitLinks, string, string) error); ok {
		r0 = rf(ctx, fromUnitID, links, userName, pullRequestURL)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUnitLinkDB creates a new instance of UnitLinkDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUnitLinkDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *UnitLinkDB {
	mock := &UnitLinkDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
