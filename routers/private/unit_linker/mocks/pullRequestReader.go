// Code generated by mockery v2.49.0. DO NOT EDIT.

package mocks

import (
	context "context"

	pull_request_reader "code.gitea.io/gitea/routers/private/pull_request_reader"
	mock "github.com/stretchr/testify/mock"
)

// PullRequestReader is an autogenerated mock type for the pullRequestReader type
type PullRequestReader struct {
	mock.Mock
}

// ReadByID provides a mock function with given fields: ctx, id, status
func (_m *PullRequestReader) ReadByID(ctx context.Context, id int64, status pull_request_reader.PullRequestStatus) (pull_request_reader.PullRequestHeader, error) {
	ret := _m.Called(ctx, id, status)

	if len(ret) == 0 {
		panic("no return value specified for ReadByID")
	}

	var r0 pull_request_reader.PullRequestHeader
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, pull_request_reader.PullRequestStatus) (pull_request_reader.PullRequestHeader, error)); ok {
		return rf(ctx, id, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, pull_request_reader.PullRequestStatus) pull_request_reader.PullRequestHeader); ok {
		r0 = rf(ctx, id, status)
	} else {
		r0 = ret.Get(0).(pull_request_reader.PullRequestHeader)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, pull_request_reader.PullRequestStatus) error); ok {
		r1 = rf(ctx, id, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPullRequestReader creates a new instance of PullRequestReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPullRequestReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *PullRequestReader {
	mock := &PullRequestReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
