// Code generated by mockery v2.49.0. DO NOT EDIT.

package mocks

import (
	gitnames "code.gitea.io/gitea/models/gitnames"
	mock "github.com/stretchr/testify/mock"
)

// BranchHeaderParser is an autogenerated mock type for the branchHeaderParser type
type BranchHeaderParser struct {
	mock.Mock
}

// Parse provides a mock function with given fields: branchName
func (_m *BranchHeaderParser) Parse(branchName string) (gitnames.BranchLinks, error) {
	ret := _m.Called(branchName)

	if len(ret) == 0 {
		panic("no return value specified for Parse")
	}

	var r0 gitnames.BranchLinks
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (gitnames.BranchLinks, error)); ok {
		return rf(branchName)
	}
	if rf, ok := ret.Get(0).(func(string) gitnames.BranchLinks); ok {
		r0 = rf(branchName)
	} else {
		r0 = ret.Get(0).(gitnames.BranchLinks)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(branchName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBranchHeaderParser creates a new instance of BranchHeaderParser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBranchHeaderParser(t interface {
	mock.TestingT
	Cleanup(func())
}) *BranchHeaderParser {
	mock := &BranchHeaderParser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
