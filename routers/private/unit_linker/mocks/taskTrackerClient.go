// Code generated by mockery v2.49.0. DO NOT EDIT.

package mocks

import (
	context "context"

	gitnames "code.gitea.io/gitea/models/gitnames"
	mock "github.com/stretchr/testify/mock"

	task_tracker_client "code.gitea.io/gitea/routers/private/task_tracker_client"
)

// TaskTrackerClient is an autogenerated mock type for the taskTrackerClient type
type TaskTrackerClient struct {
	mock.Mock
}

// CheckCodes provides a mock function with given fields: ctx, codes
func (_m *TaskTrackerClient) CheckCodes(ctx context.Context, codes []gitnames.UnitCode) (task_tracker_client.CheckCodesResponse, error) {
	ret := _m.Called(ctx, codes)

	if len(ret) == 0 {
		panic("no return value specified for CheckCodes")
	}

	var r0 task_tracker_client.CheckCodesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []gitnames.UnitCode) (task_tracker_client.CheckCodesResponse, error)); ok {
		return rf(ctx, codes)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []gitnames.UnitCode) task_tracker_client.CheckCodesResponse); ok {
		r0 = rf(ctx, codes)
	} else {
		r0 = ret.Get(0).(task_tracker_client.CheckCodesResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []gitnames.UnitCode) error); ok {
		r1 = rf(ctx, codes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTaskTrackerClient creates a new instance of TaskTrackerClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskTrackerClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskTrackerClient {
	mock := &TaskTrackerClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
