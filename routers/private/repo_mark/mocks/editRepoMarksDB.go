// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	repo_marks "code.gitea.io/gitea/models/repo_marks"
)

// EditRepoMarksDB is an autogenerated mock type for the editRepoMarksDB type
type EditRepoMarksDB struct {
	mock.Mock
}

// DeleteRepoMark provides a mock function with given fields: ctx, repoID, repoMark
func (_m *EditRepoMarksDB) DeleteRepoMark(ctx context.Context, repoID int64, repoMark repo_marks.RepoMark) error {
	ret := _m.Called(ctx, repoID, repoMark)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRepoMark")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, repo_marks.RepoMark) error); ok {
		r0 = rf(ctx, repoID, repoMark)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertRepoMark provides a mock function with given fields: ctx, repoID, expertID, repoMark
func (_m *EditRepoMarksDB) InsertRepoMark(ctx context.Context, repoID int64, expertID int64, repoMark repo_marks.RepoMark) error {
	ret := _m.Called(ctx, repoID, expertID, repoMark)

	if len(ret) == 0 {
		panic("no return value specified for InsertRepoMark")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, repo_marks.RepoMark) error); ok {
		r0 = rf(ctx, repoID, expertID, repoMark)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewEditRepoMarksDB creates a new instance of EditRepoMarksDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEditRepoMarksDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *EditRepoMarksDB {
	mock := &EditRepoMarksDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
