// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	repo_marks "code.gitea.io/gitea/models/repo_marks"
)

// RepoMarksDB is an autogenerated mock type for the repoMarksDB type
type RepoMarksDB struct {
	mock.Mock
}

// GetRepoMarks provides a mock function with given fields: ctx, repoID
func (_m *RepoMarksDB) GetRepoMarks(ctx context.Context, repoID int64) ([]repo_marks.RepoMarks, error) {
	ret := _m.Called(ctx, repoID)

	if len(ret) == 0 {
		panic("no return value specified for GetRepoMarks")
	}

	var r0 []repo_marks.RepoMarks
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]repo_marks.RepoMarks, error)); ok {
		return rf(ctx, repoID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []repo_marks.RepoMarks); ok {
		r0 = rf(ctx, repoID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repo_marks.RepoMarks)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, repoID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepoMarksDB creates a new instance of RepoMarksDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepoMarksDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepoMarksDB {
	mock := &RepoMarksDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
